
-- Define o schema de busca padrão para simplificar os comandos
SET search_path = public;

-- Desativa avisos desnecessários durante a execução do script
SET client_min_messages = warning;

--
-- FUNÇÃO: Atualiza o timestamp da coluna 'updated_at'
--
CREATE OR REPLACE FUNCTION update_timestamp_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW(); 
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--
-- TABELA: users (anteriormente "USER")
--
CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(45) NOT NULL UNIQUE,
    name VARCHAR(45) NOT NULL,
    password_hash TEXT NOT NULL, -- Alterado de VARCHAR(255) para TEXT e renomeado
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) UNIQUE,
    photo_path TEXT, -- Alterado de BYTEA para TEXT
    github_url VARCHAR(255),
    linkedin_url VARCHAR(255),
    last_login_at TIMESTAMPTZ, -- Renomeado para clareza
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Trigger para atualizar 'updated_at' na tabela 'users'
CREATE TRIGGER set_users_timestamp
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_column();

--
-- TABELA: teams (anteriormente "TEAM")
--
CREATE TABLE teams (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Trigger para atualizar 'updated_at' na tabela 'teams'
CREATE TRIGGER set_teams_timestamp
BEFORE UPDATE ON teams
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_column();

--
-- TABELA: projects (anteriormente "PROJECT")
--
CREATE TABLE projects (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_id INT NOT NULL,
    owner_id INT NOT NULL,
    name VARCHAR(45) NOT NULL,
    description TEXT,
    photo_path TEXT, -- Alterado de BYTEA para TEXT
    start_date DATE,
    real_end_date DATE,
    status VARCHAR(50),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_projects_team FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE RESTRICT,
    CONSTRAINT fk_projects_owner FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE RESTRICT
);

-- Trigger para atualizar 'updated_at' na tabela 'projects'
CREATE TRIGGER set_projects_timestamp
BEFORE UPDATE ON projects
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_column();

-- ÍNDICES PARA CHAVES ESTRANGEIRAS (otimização de performance)
CREATE INDEX idx_projects_team_id ON projects(team_id);
CREATE INDEX idx_projects_owner_id ON projects(owner_id);

--
-- TABELA: tasks (anteriormente "TASK")
--
CREATE TABLE tasks (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id INT NOT NULL,
    name VARCHAR(45) NOT NULL,
    description TEXT,
    status VARCHAR(50),
    priority INT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_tasks_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Trigger para atualizar 'updated_at' na tabela 'tasks'
CREATE TRIGGER set_tasks_timestamp
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_column();

-- ÍNDICE PARA CHAVE ESTRANGEIRA (otimização de performance)
CREATE INDEX idx_tasks_project_id ON tasks(project_id);

--
-- TABELA DE ASSOCIAÇÃO: user_teams (anteriormente "USERS_TEAMS")
--
CREATE TABLE user_teams (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    team_id INT NOT NULL,
    role VARCHAR(50) NOT NULL,

    CONSTRAINT fk_user_teams_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_teams_team FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
    
    -- Garante que um usuário só pode ter um papel por time
    UNIQUE (user_id, team_id)
);

-- ÍNDICES PARA CHAVES ESTRANGEIRAS (otimização de performance)
CREATE INDEX idx_user_teams_user_id ON user_teams(user_id);
CREATE INDEX idx_user_teams_team_id ON user_teams(team_id);

--
-- TABELA DE ASSOCIAÇÃO: user_tasks (anteriormente "USERS_TASKS")
--
CREATE TABLE user_tasks (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    task_id INT NOT NULL,
    assigned_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_user_tasks_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_tasks_task FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,

    -- Garante que um usuário só pode ser associado uma vez à mesma tarefa
    UNIQUE (user_id, task_id)
);

-- ÍNDICES PARA CHAVES ESTRANGEIRAS (otimização de performance)
CREATE INDEX idx_user_tasks_user_id ON user_tasks(user_id);
CREATE INDEX idx_user_tasks_task_id ON user_tasks(task_id);
